import graphviz

def visualize_tree(data, graph=None, parent_node=None, edge_color=None):
    if graph is None:
        graph = graphviz.Digraph(graph_attr={'ranksep': '20', 'size': '100'})

    if isinstance(data, dict):
        for key, value in data.items():
            node_label = str(key)
            node_name = str(id(data)) + node_label
            graph.node(node_name, label=node_label)

            if parent_node is not None:
                graph.edge(parent_node, node_name, color=edge_color)

            # Generate a unique color for each step (you can customize this logic)
            edge_color = f"#{hash(node_name) % 16777215:06x}"

            visualize_tree(value, graph, node_name, edge_color)
    else:
        leaf_node_name = str(id(parent_node)) + str(data)
        graph.node(leaf_node_name, label=str(data), shape="box")
        graph.edge(parent_node, leaf_node_name, color=edge_color)

    return graph



dictionary = {'step': {1: {'amount': {0: 1, 11: 1, 1: {'type': {2: 1, 4: 1, 5: 1, 1: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}, 3: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}}}, 2: {'type': {2: 1, 4: 1, 5: 1, 1: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}, 3: 0}}, 3: {'type': {2: 1, 4: 1, 1: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}, 3: {'oldbalanceOrg': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}, 5: {'oldbalanceOrg': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}}}, 4: {'type': {5: 1, 1: 1, 2: 0, 3: 1, 4: {'oldbalanceOrg': {0: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0, 2: 1}}, 2: 1}}}}, 5: {'newbalanceDest': {0: 1, 4: 1, 5: 1, 6: 1, 1: {'type': {1: 1, 3: 1, 2: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}, 4: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}, 5: 1}}, 2: 0, 3: 1}}, 6: {'type': {1: 1, 3: 1, 2: 0, 4: {'oldbalanceOrg': {0: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}, 2: {'newbalanceOrig': {0: 0, 1: 0, 3: 0, 4: 0, 5: 0, 6: 0, 2: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}, 5: 1}}, 7: {'type': {1: 0, 3: 0, 2: 1, 4: {'oldbalanceOrg': {0: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}, 2: 0}}, 5: {'oldbalanceOrg': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}}}, 8: {'type': {1: 1, 3: 1, 2: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}, 4: {'newbalanceOrig': {0: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}, 2: {'oldbalanceOrg': {0: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}, 2: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}, 5: {'oldbalanceOrg': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}}}, 9: {'oldbalanceOrg': {0: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'type': {1: 1, 3: 1, 2: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}, 4: 1, 5: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}, 2: 0}}, 10: {'type': {1: 1, 3: 1, 4: 1, 2: {'oldbalanceOrg': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceOrig': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'oldbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: {'newbalanceDest': {0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 1: 1}}}}}}}}, 5: {'oldbalanceOrg': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceOrig': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'oldbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: {'newbalanceDest': {0: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 1: 0}}}}}}}}}}}}, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0}}
graph = visualize_tree(dictionary)
graph.view()